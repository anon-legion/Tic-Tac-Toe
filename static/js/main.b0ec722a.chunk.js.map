{"version":3,"sources":["img/ttt_x.png","img/ttt_o.png","scripts/engine.js","components/gameContext.js","components/grid.js","components/gameDisplay.js","components/gameButtons.js","App.js","index.js"],"names":["isWin","playerId","arr","win","winArr","i","length","every","el","getColumnVals","isValidMove","row","col","minimax","arrRef","depth","alpha","Infinity","beta","map","score","bestScore","bestMove","j","Math","max","move","LABEL","GameContext","createContext","useGameContext","useContext","GameProvider","children","useState","gridArray","setGridArray","X","isComputer","label","O","config","setConfig","winner","setWinner","turn","setTurn","turnCount","useRef","gridController","newMove","newGrid","prevState","winController","winGame","flipTurn","resetGrid","newGame","prevTurn","buttonModule","resetGame","current","startGame","computerMove","setTimeout","useEffect","Provider","value","toggleConfig","symbol","newConfig","Grid","isComputerTurn","useCallback","rowIndex","columnIndex","className","includes","onClick","handleClick","src","n","imgX","imgO","alt","GameDisplay","playerStatus","setPlayerStatus","isGameOver","handleDivOnClick","e","currentTarget","id","configInfo","bool","GameButtons","disabled","currentYear","Date","getFullYear","App","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0ec722a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ttt_x.b7b69790.png\";","export default __webpack_public_path__ + \"static/media/ttt_o.75306199.png\";","import imgX from '../img/ttt_x.png';\nimport imgO from '../img/ttt_o.png';\n\n// displays appropriate image for current player/turn\nexport const imgSelector = (n) => {\n  if (n > 0) {\n    return imgX;\n  } else if (n < 0) {\n    return imgO;\n  } else {\n    return null;\n  }\n};\n\n// win condition function\nexport const isWin = (playerId, arr) => {\n  let win = false;\n  let winArr = [];\n\n  // check for horizontal win\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].every(el => el === playerId)) {\n      win = true;\n      winArr = [`${i}0`, `${i}1`, `${i}2`];\n      break;\n    }\n  };\n\n  // check for vertical win\n  const getColumnVals = (i) => {\n    return [arr[0][i], arr[1][i], arr[2][i]];\n  };\n\n  for (let i = 0; i < arr.length; i++) {\n    if (getColumnVals(i).every(el => el === playerId)) {\n      win = true;\n      winArr = [`0${i}`, `1${i}`, `2${i}`];;\n      break;\n    }\n  };\n\n  // check for diagonal win\n  if (arr[0][0] === playerId && arr[1][1] === playerId && arr[2][2] === playerId) {\n    win = true;\n    winArr = ['00', '11', '22'];\n  } else if (arr[0][2] === playerId && arr[1][1] === playerId && arr[2][0] === playerId) {\n    win = true;\n    winArr = ['02', '11', '20'];\n  }\n\n  return { win, winArr };\n};\n\n// checks if move is valid\nexport const isValidMove = (arr, row, col) => {\n  return !arr[row][col] ? true : false;\n};\n\n// tic-tac-toe minimax alpha-beta pruning algorithm\nexport const minimax = (arrRef, playerId, depth=0, alpha=-Infinity, beta=Infinity) => {\n  // create shallow copy of each row in 2D array of arrRef to prevent mutating original array\n  // arguments of JavaScript functions/methods are references to their original values\n  const arr = arrRef.map(row => [...row]);\n\n  // helper function to determine if game is over\n  // checks if previous depth move by previous playerId in the recursion resulted in a win\n  const { win } = isWin(-playerId, arr);\n\n  // base case: game is over\n  // if game is over, return score\n  if (win) {\n    // if previous depth move resulted in a win, return negative score evaluation by current playerId\n    return { score: -(10 - depth) };\n  } else if (arr.every(row => row.every(col => col !== 0))) {\n    // if game is a tie, return score\n    return { score: 0 };\n  }\n  \n  // recursive case: game is not over\n  let bestScore = -Infinity;\n  let bestMove = null;\n\n  // iterate through all possible moves\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      // if move is valid and square is not taken make move\n      if (isValidMove(arr, i, j)) {\n        arr[i][j] = playerId;\n        \n        // get negative score of opponent's move (recursive call)\n        // in the recursion, opponent will maximize score resulting in negative/opposite effect on current player\n        // therefore opponent's score is a negative evaluation to current player\n        // switch playerId to opponent id,  decrement depth by 1 (recursive call), evaluate alpha as -beta and beta as -alpha\n        let score = -minimax(arr, -playerId, depth + 1, -beta, -alpha).score;\n\n        // if score is better than best score, update best score and best move (for this depth)\n        if (score > bestScore) {\n          bestScore = score;\n          bestMove = [i, j];\n        };\n\n        // if score is better than alpha, update alpha\n        alpha = Math.max(alpha, score);\n\n        // if alpha is greater than beta, prune tree and return best score and best move (for this depth)\n        if (alpha >= beta) {\n          break;\n        };\n\n        // undo move for next iteration of loop (for this depth)\n        arr[i][j] = 0;\n      };\n    };\n  };\n\n  // return best score and best move (for this depth)\n  return { score: bestScore, move: bestMove };\n};","// react function component that renders the game context\n\nimport React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { minimax, isWin } from '../scripts/engine.js';\n\n\nconst LABEL = {\n  PLAYER: 'Player',\n  COMPUTER: 'MiniMax'\n};\n\nconst labelSelector = (bool) => {\n  return bool ? LABEL.COMPUTER : LABEL.PLAYER;\n}\n\nconst GameContext = createContext();\n\n// custom hook that returns the game context for use in components\nexport function useGameContext() {\n  return useContext(GameContext);\n}\n\nexport const GameProvider = ({ children }) => {\n  // initial grid state\n  const [gridArray, setGridArray] = useState(() => [\n    [0, 0, 0],\n    [0, 0, 0],\n    [0, 0, 0]\n  ]);\n\n  // player configuration state\n  const [config, setConfig] = useState(() =>{\n    return {\n      X: {\n        isComputer: false,\n        label: LABEL.PLAYER\n      },\n      O: {\n        isComputer: false,\n        label: LABEL.PLAYER\n      }\n    };\n  });\n  \n  // game over state\n  const [winner, setWinner] = useState(() => []);\n  \n  // turn state\n  const [turn, setTurn] = useState(() => 0);\n\n  // count number of turns state\n  const turnCount = useRef(0);\n\n  \n  const gridController = ((row, col) => {\n    // add a value/move to the grid array\n    const newMove = (row, col) => {      \n      const newGrid = [...gridArray];\n      newGrid[row][col] = turn;\n      setGridArray(prevState => [...newGrid]);\n      // check if game is over\n      const { win, winArr } = isWin(turn, gridArray);\n      if (win) {\n        //add winning squares to win state\n        winController.winGame(winArr);\n      } else {\n        flipTurn();\n      };\n    };\n    \n    const resetGrid = () => {\n      setGridArray(prevState => [\n        [0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0]\n      ]);\n    };\n    \n    return {\n      newMove,\n      resetGrid\n    }\n  })();\n  \n  const winController = ((arr) => {\n    const winGame = (arr) => {\n      setWinner(prevState => [...arr]);\n    };\n    \n    const newGame = () => {\n      setWinner(prevState => []);\n    };\n    \n    return {\n      winGame,\n      newGame\n    }\n  })()\n  \n  // toggle turn state\n  const flipTurn = () => {\n    setTurn(prevTurn => prevTurn * -1);\n  };  \n\n  // button function module\n  const buttonModule = (() => {\n    const resetGame = () => {\n      gridController.resetGrid();\n      winController.newGame();\n      setTurn(prevState => 0);\n      turnCount.current = 0;\n    };\n\n    const startGame = () => {\n      setTurn(prevState => 1);\n      turnCount.current = 0;\n    };\n\n    return {\n      resetGame,\n      startGame\n    };    \n  })()\n\n  // function that calculates and performs computer move\n  const computerMove = () => {\n    // call minimax function\n    if ((config.X.isComputer && turn > 0) || (config.O.isComputer && turn < 0)) {\n      const [row, col] = minimax(gridArray, turn).move;\n      // perform computer move\n      setTimeout(() => {gridController.newMove(row, col)}, 400);\n    }\n  }\n\n  // useEffect that auto increments turnCount ref\n  // and calls computerMove function if turn is computer\n  useEffect(() => {\n    if (turnCount.current < 9) {\n      computerMove();\n    };\n    turnCount.current = turnCount.current + 1\n  }, [turn]);\n  \n\n  // function that toggles symbol isComputer and label state\n  const toggleConfig = (symbol) => {\n    const newConfig = {...config};\n    newConfig[symbol].isComputer = !newConfig[symbol].isComputer;\n    newConfig[symbol].label = labelSelector(newConfig[symbol].isComputer);\n    setConfig(prevState => newConfig);\n  };\n\n\n  return (\n    <GameContext.Provider value={{\n      gridArray,\n      gridController,\n      turn,\n      flipTurn,\n      winner,\n      winController,\n      turnCount,\n      buttonModule,\n      config,\n      toggleConfig\n    }}>\n      {children}\n    </GameContext.Provider>\n  )\n}\n","// react function component that renders a 3 by 3 grid of squares\n\nimport React, { useCallback } from 'react';\nimport { imgSelector } from '../scripts/engine.js';\nimport { useGameContext } from './gameContext.js';\nimport 'bulma/css/bulma.min.css';\nimport '../App.css';\n\n\nexport default function Grid() {\n  // use custom hook to access game states\n  const {\n    gridArray,\n    turn,\n    gridController,\n    winner,\n    config\n  } = useGameContext();\n\n\n  const handleClick = (row, col) => {\n    // add value/move to grid array\n    gridController.newMove(row, col);\n  }\n\n  // helper function checks if computer to play current turn\n  const isComputerTurn = useCallback(() => {\n    const isXComputerTurn = () => {\n      return config.X.isComputer && turn === 1 ? true : false;\n    };\n    const isOComputerTurn = () => {\n      return config.O.isComputer && turn === -1 ? true : false;\n    };\n    return isXComputerTurn() || isOComputerTurn()\n  }, [config, turn])\n  \n  return (\n    <>\n      {gridArray.map((row, rowIndex) => {\n        return (\n          row.map((col, columnIndex) => {\n            return (              \n              <div\n                key={`${rowIndex}${columnIndex}`}\n                // add border to squares and add class on win to highlight and animate winning squares\n                className={`square-${rowIndex}${columnIndex} ${winner.includes(`${rowIndex}${columnIndex}`) ? 'has-background-success-dark is-win' : ''}`}\n                value={gridArray[rowIndex][columnIndex]}\n                // disable onClick event handler if game is over or square is already filled or game is not in playing state (turn === 0) or is computer turn\n                onClick={winner.length || col || !turn || isComputerTurn()? null : () => handleClick(rowIndex, columnIndex)}\n              >\n                <img src={imgSelector(gridArray[rowIndex][columnIndex])} alt={gridArray[rowIndex][columnIndex] === 0 ? '' : \"X or O\"} />\n              </div>\n            );\n          })\n        );\n      })}\n    </>\n  );\n}","// react fcuntion component to display game status\n\nimport React, { useState, useEffect } from 'react';\nimport { useGameContext } from './gameContext';\nimport 'bulma/css/bulma.min.css';\nimport '../App.css';\n\n\nexport default function GameDisplay() {\n  const { turn, winner, turnCount, config, toggleConfig } = useGameContext();\n\n  const [playerStatus, setPlayerStatus] = useState(() => {\n    return {\n      X: '',\n      O: '',\n    }\n  });\n\n\n  useEffect(() => {\n    // function checks if there is already a winner\n    // returns true if winner array is not empty, false otherwise\n    const isGameOver = () => {\n      return winner.length ? true : false;\n    }\n    if (turnCount.current >= 9 && !isGameOver()) {\n      // if moves have been exhausted and now winner game is draw\n      setPlayerStatus(prevState => {\n        return {\n          X: 'DRAW',\n          O: 'DRAW'\n        }\n      })\n    } else {\n      // do if moves have not been exhausted\n      switch (turn) {\n        case 1:\n          setPlayerStatus(prevState => {\n            return {\n              X: isGameOver() ? 'WIN!' : 'Turn',\n              O: isGameOver() ? 'LOSE!' : null,\n            }\n          });\n          break;\n        case -1:\n          setPlayerStatus(prevState => {\n            return {\n              X: isGameOver() ? 'LOSE!' : null,\n              O: isGameOver() ? 'WIN!' : 'Turn',\n            }\n          });\n          break;\n        default:\n          return null;\n      }\n    }\n  },[turn, winner, turnCount]);\n\n  // function to toggle AI on double click used by div box\n  const handleDivOnClick = (e) => {\n    toggleConfig(e.currentTarget.id);\n  };\n\n  // helper function to display config info\n  const configInfo = (bool) => {\n    return bool ? '(click for Player)' : '(click for AI)';\n  }\n\n  return (\n    <>\n      <div className=\"columns is-variable is-1 is-mobile\">\n        <div className=\"column is-half\">\n          <div className=\"section p-0 pl-3 min-height-1\">\n            {/* replace playerStatus with configInfo if game not in playing state (turn === 0) */}\n            <h4 className=\"is-size-5 has-text-link\">{turn ? playerStatus.X : configInfo(config.X.isComputer) }</h4>\n          </div>\n          <div className={`box p-3 player-x ${winner.length && turn > 0 ? 'is-win' : null}`} id=\"X\" onClick={!turn ? handleDivOnClick : null}>\n            <h4 className=\"is-size-5 has-text-white\">{config.X.label}</h4>\n          </div>\n        </div>\n        <div className=\"column is-half\">\n          <div className=\"section p-0 pr-3 has-text-right min-height-1\">\n            {/* replace playerStatus with configInfo if game not in playing state (turn === 0) */}\n            <h4 className=\"is-size-5 has-text-link\">{turn ? playerStatus.O : configInfo(config.O.isComputer)}</h4>\n          </div>\n          <div className={`box p-3 has-text-right player-o ${winner.length && turn < 0 ? 'is-win' : null}`} id=\"O\" onClick={!turn ? handleDivOnClick : null}>\n            <h4 className=\"is-size-5 has-text-white\">{config.O.label}</h4>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n\n}","// react function component for the game buttons\n\nimport React from 'react';\nimport { useGameContext } from './gameContext';\nimport 'bulma/css/bulma.min.css';\nimport '../App.css';\n\n\nexport default function GameButtons() {\n  const { buttonModule, turn, turnCount } = useGameContext();\n  return (\n    <>\n      {/* change button function from startGame if game is not in playing state (turn === 0) to resetGame otherwise, disable button on first move */}\n      <button className={`button is-link ${turn ? 'is-outlined' : null} button-min-width`} onClick={turn ? buttonModule.resetGame : buttonModule.startGame} disabled={turn && !turnCount.current? true : false}>\n        <span className=\"is-size-5\">{turn ? 'Reset' : 'Start'}</span>\n      </button>\n    </>\n  );\n}","import Grid from './components/grid.js';\nimport { GameProvider } from './components/gameContext.js';\nimport GameDisplay from './components/gameDisplay.js';\nimport GameButtons from './components/gameButtons.js';\nimport 'bulma/css/bulma.min.css';\nimport './App.css';\n// import 'https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.15.4/css/fontawesome.min.css';\n\nconst currentYear = new Date().getFullYear();\n\nfunction App() {\n  return (\n    <>\n      <header className=\"hero is-black\">\n        <div className=\"hero-body has-text-centered pb-2\">\n          <h1 className=\"title is-1 has-text-primary\">Tic Tac Toe</h1>\n          <h2 className=\"subtitle is-4\">Minimax algorithm</h2>\n        </div>\n      </header>\n      <main className=\"is-flex is-flex-direction-column is-justify-content-center mobile-padding\">\n        <GameProvider>\n          <div className=\"container\">\n            <div className=\"section p-0 pb-4 pt-4 mobile-padding\">\n              <GameDisplay />\n            </div>\n            <div className=\"grid-container\">\n              <Grid />\n            </div>\n            <div className=\"buttons is-centered p-6 mobile-button-padding\">\n              <GameButtons />\n            </div>\n          </div>\n        </GameProvider>\n      </main>\n      <footer className=\"is-flex is-justify-content-center\">\n        <a href=\"https://github.com/anon-legion\" target=\"_blank\" rel=\"noreferrer nofollow\">\n          <p className=\"is-clickable is-size-5 has-text-grey-dark\">{`Copyright © 2021-${currentYear} =GV=`}\n            <span className=\"icon-text\">\n              <span className=\"icon is-medium has-text-grey-dark\">\n                <i className=\"fab fa-github is-size-4\"></i>\n              </span>\n            </span>\n          </p>\n        </a>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}